generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Model - provided by Supabase

// Chat model - represents a conversation session
model Chat {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") // References Supabase auth.users.id
  title     String?  // Optional title for the chat
  shareId   String?  @unique @map("share_id") // For shareable chat links
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  messages Message[]
  
  // Indexes for better query performance
  @@index([userId]) // For getUserChats() query
  @@index([userId, updatedAt(sort: Desc)]) // For getUserChats() with ordering
  @@index([id, userId]) // For getChatWithMessages() compound lookup
  @@map("chats")
}

// Message model - represents individual messages in a chat
model Message {
  id        String   @id @default(cuid())
  chatId    String   @map("chat_id")
  role      String   // 'user' or 'assistant'
  content   String   // The message content
  model     String?  // Optional: which LLM model was used for assistant messages
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  // Indexes for better query performance
  @@index([chatId]) // For foreign key relationship (may already exist)
  @@index([chatId, createdAt]) // For getChatWithMessages() with message ordering
  @@index([createdAt(sort: Desc)]) // For getting latest messages in getUserChats()
  @@map("messages")
}

// Usage Log model - tracks model usage for analytics (no user content stored)
model UsageLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id") // References Supabase auth.users.id
  model     String   // The AI model used (e.g., "openai/gpt-4o-mini")
  chatId    String?  @map("chat_id") // Optional: link to specific chat session
  createdAt DateTime @default(now()) @map("created_at")
  
  // Indexes for better query performance
  @@index([userId]) // For user-specific usage queries
  @@index([model]) // For model-specific analytics
  @@index([createdAt]) // For time-based queries
  @@index([userId, createdAt]) // For user usage over time
  @@index([userId, model]) // For user model preferences
  @@map("usage_logs")
}

// API Key model - stores encrypted user API keys for BYOK functionality
model ApiKey {
  id            String   @id @default(cuid())
  userId        String   @map("user_id") // References Supabase auth.users.id
  provider      String   // The AI provider (e.g., "openrouter", "openai", "anthropic")
  encryptedKey  String   @map("encrypted_key") // AES-256 encrypted API key
  keyName       String?  @map("key_name") // Optional user-friendly name for the key
  isActive      Boolean  @default(true) @map("is_active") // Whether this key should be used
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastUsedAt    DateTime? @map("last_used_at") // Track when key was last used
  
  // Indexes for better query performance
  @@index([userId]) // For user-specific key queries
  @@index([userId, provider]) // For getting user keys by provider
  @@index([userId, isActive]) // For getting active keys
  @@unique([userId, provider, keyName]) // Prevent duplicate key names per provider per user
  @@map("api_keys")
}